---
import HelloWorldComponent from "../components/HelloWorldComponent.astro";
import DefaultLayout from "../layouts/DefaultLayout.astro";
import { SitemapService, StaticPath } from "./../../sitecoreyfetchingscripts/sitemap-service";
import { SitecorePagePropsFactory } from "./../../sitecoreyfetchingscripts/page-props-factory";
import { SitecoreContextMap } from "@astro-sitecore-jss/astro-sitecore-jss";
import type { LayoutServiceContext, RouteData } from "@sitecore-jss/sitecore-jss/layout";
import config from "../temp/config";
import GraphQLRequestClientFactory from "./../../sitecoreyfetchingscripts/graphql/graphql-request-client-factory";

export const prerender = true; // False = SSR; True = SSG.

export async function getStaticPaths() {
  const graphQlRequestSitemapFactory = new GraphQLRequestClientFactory();
  const sitemapService = new SitemapService(graphQlRequestSitemapFactory);
  const staticPaths: StaticPath[] = await sitemapService.getStaticSitemap(config.defaultLanguage);

  return staticPaths;
}

export type SitecoreContextValue = LayoutServiceContext & {
    itemId?: string;
    route?: RouteData;
};

const { path } = Astro.params;

let sitecorePagePropsFactory = new SitecorePagePropsFactory();
const pageProps = await sitecorePagePropsFactory.create(path ?? "/", config.defaultLanguage);

let scContext = pageProps.layoutData.sitecore.context as SitecoreContextValue;
scContext.route = pageProps.layoutData.sitecore.route;
scContext.itemId = pageProps.layoutData.sitecore.route.itemId;

SitecoreContextMap.setKey('scContext', scContext);
SitecoreContextMap.setKey('dictionary', pageProps.dictionary);

---

<DefaultLayout layoutData={pageProps.layoutData}>
  <HelloWorldComponent />
</DefaultLayout>