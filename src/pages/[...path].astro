---
/*
 * 101-LEVEL LESSON:
 * Q:  Why is this file named "[...path].astro"?
 * A:  To tell the server what to do
 *       whenever anyone hits ANY URL in our
 *       frontend web site.
 *     See https://docs.astro.build/en/guides/routing/#rest-parameters
 *     (In this case, the answer is "see if the backend
 *       Sitecore CMS API is expecting there to be such a URL.")
 */

import DefaultLayout from "../layouts/DefaultLayout.astro";
import { SitecorePagePropsFactory } from "../../utils-to-deal-with-backend/runtimefetchingscripts/page-props-factory";
import { SitecoreContextMap } from "@astro-sitecore-jss/astro-sitecore-jss";
import type {
  LayoutServiceContext,
  RouteData,
} from "@sitecore-jss/sitecore-jss/layout";
import config from "../temp/config";

export const prerender = false; // False = SSR; True = SSG. // Dynamic routes and Astro Server Islands don't play nice with each other, and I want to flip navbar tab to "active" class at runtime, so sticking to SSR for now.

export type SitecoreContextValue = LayoutServiceContext & {
  itemId?: string;
  route?: RouteData;
};

const { path } = Astro.params;

let sitecorePagePropsFactory = new SitecorePagePropsFactory();
const pageProps = await sitecorePagePropsFactory.create(
  path ?? "/",
  config.defaultLanguage,
);

let scContext = pageProps.layoutData.sitecore.context as SitecoreContextValue;
scContext.route = pageProps.layoutData.sitecore.route;
scContext.itemId = pageProps.layoutData.sitecore.route.itemId;

SitecoreContextMap.setKey("scContext", scContext);
SitecoreContextMap.setKey("dictionary", pageProps.dictionary);

/*
 * 101-LEVEL LESSON:
 * Finally, down below in our actual template code,
 *   we'll ask DefaultLayout.astro to actually
 *   do the dirty work of turning the data
 *   we discovered for the URL our visitor tried
 *   (if we discovered any, that is) into HTML.
 */
---

<DefaultLayout layoutData={pageProps.layoutData} />
