---
import SCLSComponentFactory from "./../temp/component-factory.astro";
import type {
    ComponentRendering,
    RouteData,
    HtmlElementRendering,
    Field,
    Item,
} from "@sitecore-jss/sitecore-jss/layout";

// Clarify that invocations of "<SCLSPlaceholderComponent>" can instead be "<SCLSPlaceholderComponent key="value" and="so on">".
export interface Props {
    [key: string]: unknown;
    name: string;
    rendering: ComponentRendering | RouteData;
    componentFactory?: typeof SCLSComponentFactory;
    fields?: {
        [name: string]: Field | Item[];
    };
    params?: {
        [name: string]: string;
    };
    missingComponentComponent?: any;
    hiddenRenderingComponent?: any;
    errorComponent?: any;
}

// Help invokers of <SCLSPlaceholderComponent> understand that
// it should behave differently if "normal" vs. embedded within the Sitecore Experience Editor.
export type JssDynamicComponent = ComponentRendering & {
    isxEditorComponent?: boolean;
};

// Make <SCLSPlaceholderComponent> return something "normal" vs. "Experience-Editor-friendly."
export function convertToDynamicComponents(
    components:
        | (ComponentRendering | HtmlElementRendering)[]
        | undefined,
) {
    return (
        components &&
        components.map((component) => {
            const jssComponent = {
                ...component,
                //TODO: isxEditorComponent depend on experiense editor element name or type
                isxEditorComponent: false,
            } as JssDynamicComponent;

            return jssComponent;
        })
    );
}

// Make it more shorthandey to refer to whatever 
// "rendering" property <SCLSPlaceholderComponent> has been given by its invoker.
const { rendering } = Astro.props;

// Build up a collection of all of the components making up the <SCLSPlaceholderComponent>.
const components = convertToDynamicComponents(
    rendering.placeholders && rendering.placeholders[Astro.props.name],
);

// Which components behave differently when viewed through the Experience Editor portal?
const isEditor =
    components &&
    components.every((component) =>
        component.isxEditorComponent ? true : false,
    );

// Determine whether there're any more Astro components to render
// that were written between <SCLSPlaceholderComponent> and </SCLSPlaceholderComponent>.
const hasChildren = await Astro.slots.has("default");

// Build up a collection of exactly what Astro components need to be rendered
// that were written between <SCLSPlaceholderComponent> and </SCLSPlaceholderComponent>.
const children = await Astro.slots.render("default", [components, isEditor]);
---

{
    (hasChildren && <Fragment set:html={children} />) ||
        (components &&
            components.map((component) => (
                <SCLSComponentFactory
                    name={component.componentName}
                    route={component}
                />
            )))
}